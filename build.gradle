plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.sonarqube' version '5.1.0.4882'

	id 'jacoco'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}


jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
		xml.outputLocation = layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
        html.required = true
    }
}

group = 'co.edu.uniajc.estudiante'
version = '0.0.1-SNAPSHOT'
description = 'Proyecto de eccomerse para una tienda de frutas'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
springBoot {
    mainClass = 'co.edu.uniajc.estudiante.opemay.OpemayApplication'
}
ext {
	set('springCloudVersion', "2025.0.0")
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	
	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	
	// Circuit Breaker y Resilience4j
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'io.github.resilience4j:resilience4j-spring-boot3'
	implementation 'io.github.resilience4j:resilience4j-micrometer'
	
	// Liquibase para migraciones (para posibles integraciones SQL)
	implementation 'org.liquibase:liquibase-core'
	implementation 'com.h2database:h2' // Base temporal para Liquibase
	
	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	// Firebase
	implementation 'com.google.firebase:firebase-admin:9.2.0'
	
	// ValidaciÃ³n
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	// Swagger/OpenAPI 3
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'org.springdoc:springdoc-openapi-starter-common:2.2.0'
	
	// Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.fasterxml.jackson.core:jackson-databind'
	testImplementation 'org.mockito:mockito-inline:5.2.0'
	testImplementation 'org.assertj:assertj-core'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	// Testing especÃ­fico para JWT
	testImplementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	testRuntimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	testRuntimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootRun') {
	jvmArgs = [
		'--add-opens=java.base/java.time=ALL-UNNAMED',
		'--add-opens=java.base/java.time.chrono=ALL-UNNAMED',
		'--add-opens=java.base/java.time.format=ALL-UNNAMED',
		'--add-opens=java.base/java.time.temporal=ALL-UNNAMED',
		'--add-opens=java.base/java.time.zone=ALL-UNNAMED',
		'--add-opens=java.base/java.util=ALL-UNNAMED',
		'--add-opens=java.base/java.lang=ALL-UNNAMED',
		'--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
	]
}
sonarqube {
    properties {
        property "sonar.projectKey", System.getenv("SONAR_PROJECT_KEY")
        property "sonar.organization", System.getenv("SONAR_ORG")
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.token", System.getenv("SONAR_TOKEN")

        // ðŸ‘‡ muy importante para cobertura
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}


